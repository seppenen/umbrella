#Uncomment port 5005 to enable debugging
version: '3.4'

networks:
    backend-network:
        driver: bridge

services:
  postgres:
    image: ${DB_IMAGE_VERSION:-postgres:16.1}
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-0000}
    volumes:
      - ./backend/data:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=${DB_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-0000}
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-0000}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network

  api-gateway:
    container_name: api-gateway
    build: backend/api-gateway
    image: ${API_GATEWAY_IMAGE:-api-gateway}
    env_file:
      - ./backend/api-gateway/.env.${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-gateway:8080/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  umbrella-service:
    container_name: umbrella-service
    build: backend/umbrella-service
    image: ${UMBRELLA_SERVICE_IMAGE:-umbrella-service}
    env_file:
      - ./backend/umbrella-service/.env.${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - ${UMBRELLA_PORT:-0}:8080
      - "5006:5005"
    depends_on:
      postgres:
          condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://umbrella-service:8080/api/v1/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  transaction-service:
    container_name: transaction-service
    build: backend/transaction-service
    image: ${TRANSACTION_SERVICE_IMAGE:-transaction-service}
    env_file:
      - ./backend/transaction-service/.env.${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - ${TRANSACTION_SERVICE_PORT:-0}:8084
      - "5006:5005"
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://transaction-service:8080/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  user-service:
    container_name: user-service
    build: backend/user-service
    image: ${UMBRELLA_SERVICE_IMAGE:-user-service}
    env_file:
      - ./backend/user-service/.env.${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - ${USER_SERVICE_PORT:-0}:8080
      - "5007:5005"
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://user-service:8080/api/v1/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  auth-service:
    container_name: auth-service
    build: backend/auth-service
    image: ${AUTH_SERVICE_IMAGE:-auth-service}
    env_file:
      - ./backend/auth-service/.env.${ENVIRONMENT:-dev}
    restart: unless-stopped
    ports:
      - ${AUTH_SERVICE_PORT:-0}:8080
      - "5008:5005"
    depends_on:
      postgres:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://auth-service:8080/api/v1/health" ]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  frontend:
    container_name: frontend
    build: frontend/umbrella
    image: frontend
    restart: unless-stopped
    ports:
      - "80:3000"
    networks:
      - backend-network



